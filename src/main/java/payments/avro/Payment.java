/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package payments.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Payment extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 186942540666652890L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Payment\",\"namespace\":\"payments.avro\",\"fields\":[{\"name\":\"paymentID\",\"type\":\"string\"},{\"name\":\"sender\",\"type\":\"string\"},{\"name\":\"receiver\",\"type\":\"string\"},{\"name\":\"paymentMethod\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"long\"},{\"name\":\"description\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"createdAt\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"timestamp-millis\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Payment> ENCODER =
      new BinaryMessageEncoder<Payment>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Payment> DECODER =
      new BinaryMessageDecoder<Payment>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Payment> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Payment> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Payment>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Payment to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Payment from a ByteBuffer. */
  public static Payment fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence paymentID;
  @Deprecated public java.lang.CharSequence sender;
  @Deprecated public java.lang.CharSequence receiver;
  @Deprecated public java.lang.CharSequence paymentMethod;
  @Deprecated public long amount;
  @Deprecated public java.lang.CharSequence description;
  @Deprecated public java.lang.Integer createdAt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Payment() {}

  /**
   * All-args constructor.
   * @param paymentID The new value for paymentID
   * @param sender The new value for sender
   * @param receiver The new value for receiver
   * @param paymentMethod The new value for paymentMethod
   * @param amount The new value for amount
   * @param description The new value for description
   * @param createdAt The new value for createdAt
   */
  public Payment(java.lang.CharSequence paymentID, java.lang.CharSequence sender, java.lang.CharSequence receiver, java.lang.CharSequence paymentMethod, java.lang.Long amount, java.lang.CharSequence description, java.lang.Integer createdAt) {
    this.paymentID = paymentID;
    this.sender = sender;
    this.receiver = receiver;
    this.paymentMethod = paymentMethod;
    this.amount = amount;
    this.description = description;
    this.createdAt = createdAt;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return paymentID;
    case 1: return sender;
    case 2: return receiver;
    case 3: return paymentMethod;
    case 4: return amount;
    case 5: return description;
    case 6: return createdAt;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: paymentID = (java.lang.CharSequence)value$; break;
    case 1: sender = (java.lang.CharSequence)value$; break;
    case 2: receiver = (java.lang.CharSequence)value$; break;
    case 3: paymentMethod = (java.lang.CharSequence)value$; break;
    case 4: amount = (java.lang.Long)value$; break;
    case 5: description = (java.lang.CharSequence)value$; break;
    case 6: createdAt = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'paymentID' field.
   * @return The value of the 'paymentID' field.
   */
  public java.lang.CharSequence getPaymentID() {
    return paymentID;
  }

  /**
   * Sets the value of the 'paymentID' field.
   * @param value the value to set.
   */
  public void setPaymentID(java.lang.CharSequence value) {
    this.paymentID = value;
  }

  /**
   * Gets the value of the 'sender' field.
   * @return The value of the 'sender' field.
   */
  public java.lang.CharSequence getSender() {
    return sender;
  }

  /**
   * Sets the value of the 'sender' field.
   * @param value the value to set.
   */
  public void setSender(java.lang.CharSequence value) {
    this.sender = value;
  }

  /**
   * Gets the value of the 'receiver' field.
   * @return The value of the 'receiver' field.
   */
  public java.lang.CharSequence getReceiver() {
    return receiver;
  }

  /**
   * Sets the value of the 'receiver' field.
   * @param value the value to set.
   */
  public void setReceiver(java.lang.CharSequence value) {
    this.receiver = value;
  }

  /**
   * Gets the value of the 'paymentMethod' field.
   * @return The value of the 'paymentMethod' field.
   */
  public java.lang.CharSequence getPaymentMethod() {
    return paymentMethod;
  }

  /**
   * Sets the value of the 'paymentMethod' field.
   * @param value the value to set.
   */
  public void setPaymentMethod(java.lang.CharSequence value) {
    this.paymentMethod = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Long getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Long value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'createdAt' field.
   * @return The value of the 'createdAt' field.
   */
  public java.lang.Integer getCreatedAt() {
    return createdAt;
  }

  /**
   * Sets the value of the 'createdAt' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.Integer value) {
    this.createdAt = value;
  }

  /**
   * Creates a new Payment RecordBuilder.
   * @return A new Payment RecordBuilder
   */
  public static payments.avro.Payment.Builder newBuilder() {
    return new payments.avro.Payment.Builder();
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Payment RecordBuilder
   */
  public static payments.avro.Payment.Builder newBuilder(payments.avro.Payment.Builder other) {
    return new payments.avro.Payment.Builder(other);
  }

  /**
   * Creates a new Payment RecordBuilder by copying an existing Payment instance.
   * @param other The existing instance to copy.
   * @return A new Payment RecordBuilder
   */
  public static payments.avro.Payment.Builder newBuilder(payments.avro.Payment other) {
    return new payments.avro.Payment.Builder(other);
  }

  /**
   * RecordBuilder for Payment instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Payment>
    implements org.apache.avro.data.RecordBuilder<Payment> {

    private java.lang.CharSequence paymentID;
    private java.lang.CharSequence sender;
    private java.lang.CharSequence receiver;
    private java.lang.CharSequence paymentMethod;
    private long amount;
    private java.lang.CharSequence description;
    private java.lang.Integer createdAt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(payments.avro.Payment.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.paymentID)) {
        this.paymentID = data().deepCopy(fields()[0].schema(), other.paymentID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sender)) {
        this.sender = data().deepCopy(fields()[1].schema(), other.sender);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.receiver)) {
        this.receiver = data().deepCopy(fields()[2].schema(), other.receiver);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[3].schema(), other.paymentMethod);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[6].schema(), other.createdAt);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Payment instance
     * @param other The existing instance to copy.
     */
    private Builder(payments.avro.Payment other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.paymentID)) {
        this.paymentID = data().deepCopy(fields()[0].schema(), other.paymentID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sender)) {
        this.sender = data().deepCopy(fields()[1].schema(), other.sender);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.receiver)) {
        this.receiver = data().deepCopy(fields()[2].schema(), other.receiver);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.paymentMethod)) {
        this.paymentMethod = data().deepCopy(fields()[3].schema(), other.paymentMethod);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.amount)) {
        this.amount = data().deepCopy(fields()[4].schema(), other.amount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.description)) {
        this.description = data().deepCopy(fields()[5].schema(), other.description);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.createdAt)) {
        this.createdAt = data().deepCopy(fields()[6].schema(), other.createdAt);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'paymentID' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentID() {
      return paymentID;
    }

    /**
      * Sets the value of the 'paymentID' field.
      * @param value The value of 'paymentID'.
      * @return This builder.
      */
    public payments.avro.Payment.Builder setPaymentID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.paymentID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentID' field has been set.
      * @return True if the 'paymentID' field has been set, false otherwise.
      */
    public boolean hasPaymentID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'paymentID' field.
      * @return This builder.
      */
    public payments.avro.Payment.Builder clearPaymentID() {
      paymentID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'sender' field.
      * @return The value.
      */
    public java.lang.CharSequence getSender() {
      return sender;
    }

    /**
      * Sets the value of the 'sender' field.
      * @param value The value of 'sender'.
      * @return This builder.
      */
    public payments.avro.Payment.Builder setSender(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sender = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'sender' field has been set.
      * @return True if the 'sender' field has been set, false otherwise.
      */
    public boolean hasSender() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'sender' field.
      * @return This builder.
      */
    public payments.avro.Payment.Builder clearSender() {
      sender = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'receiver' field.
      * @return The value.
      */
    public java.lang.CharSequence getReceiver() {
      return receiver;
    }

    /**
      * Sets the value of the 'receiver' field.
      * @param value The value of 'receiver'.
      * @return This builder.
      */
    public payments.avro.Payment.Builder setReceiver(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.receiver = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'receiver' field has been set.
      * @return True if the 'receiver' field has been set, false otherwise.
      */
    public boolean hasReceiver() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'receiver' field.
      * @return This builder.
      */
    public payments.avro.Payment.Builder clearReceiver() {
      receiver = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethod' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentMethod() {
      return paymentMethod;
    }

    /**
      * Sets the value of the 'paymentMethod' field.
      * @param value The value of 'paymentMethod'.
      * @return This builder.
      */
    public payments.avro.Payment.Builder setPaymentMethod(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.paymentMethod = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethod' field has been set.
      * @return True if the 'paymentMethod' field has been set, false otherwise.
      */
    public boolean hasPaymentMethod() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'paymentMethod' field.
      * @return This builder.
      */
    public payments.avro.Payment.Builder clearPaymentMethod() {
      paymentMethod = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Long getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public payments.avro.Payment.Builder setAmount(long value) {
      validate(fields()[4], value);
      this.amount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public payments.avro.Payment.Builder clearAmount() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return description;
    }

    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public payments.avro.Payment.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.description = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public payments.avro.Payment.Builder clearDescription() {
      description = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdAt' field.
      * @return The value.
      */
    public java.lang.Integer getCreatedAt() {
      return createdAt;
    }

    /**
      * Sets the value of the 'createdAt' field.
      * @param value The value of 'createdAt'.
      * @return This builder.
      */
    public payments.avro.Payment.Builder setCreatedAt(java.lang.Integer value) {
      validate(fields()[6], value);
      this.createdAt = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'createdAt' field has been set.
      * @return True if the 'createdAt' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'createdAt' field.
      * @return This builder.
      */
    public payments.avro.Payment.Builder clearCreatedAt() {
      createdAt = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Payment build() {
      try {
        Payment record = new Payment();
        record.paymentID = fieldSetFlags()[0] ? this.paymentID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.sender = fieldSetFlags()[1] ? this.sender : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.receiver = fieldSetFlags()[2] ? this.receiver : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.paymentMethod = fieldSetFlags()[3] ? this.paymentMethod : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.amount = fieldSetFlags()[4] ? this.amount : (java.lang.Long) defaultValue(fields()[4]);
        record.description = fieldSetFlags()[5] ? this.description : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.createdAt = fieldSetFlags()[6] ? this.createdAt : (java.lang.Integer) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Payment>
    WRITER$ = (org.apache.avro.io.DatumWriter<Payment>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Payment>
    READER$ = (org.apache.avro.io.DatumReader<Payment>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
